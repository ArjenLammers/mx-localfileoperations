// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package localfileoperations.actions;

import java.io.File;
import java.io.FilenameFilter;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Returns a list of File entities which are contained in the supplied path.
 */
public class List extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.lang.String path;
	private java.lang.String wildcard;
	private java.lang.Boolean recursive;

	public List(IContext context, java.lang.String path, java.lang.String wildcard, java.lang.Boolean recursive)
	{
		super(context);
		this.path = path;
		this.wildcard = wildcard;
		this.recursive = recursive;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		File p = new File(path);
		IOFileFilter fileFilter = wildcard == null ? TrueFileFilter.INSTANCE : 
			new WildcardFileFilter(wildcard);
		IOFileFilter dirFilter = recursive ? TrueFileFilter.INSTANCE : null;
		
		Collection<File> files = FileUtils.listFiles(p, fileFilter, dirFilter);
		java.util.List<IMendixObject> result = new LinkedList<>();
		
		files.forEach(f -> {
			localfileoperations.proxies.File mxFile = new localfileoperations.proxies.File(getContext());
			mxFile.setExecutable(f.canExecute());
			mxFile.setIsDirectory(f.isDirectory());
			mxFile.setIsFile(f.isFile());
			mxFile.setIsHidden(f.isHidden());
			mxFile.setIsSymlink(FileUtils.isSymlink(f));
			mxFile.setLastModified(new Date(f.lastModified()));
			mxFile.setName(f.getName());
			mxFile.setPath(FilenameUtils.getFullPathNoEndSeparator(f.getAbsolutePath()));
			mxFile.setFullNamePath(f.getAbsolutePath());
			mxFile.setReadable(f.canRead());
			mxFile.setSize(f.length());
			mxFile.setWriteable(f.canWrite());
			result.add(mxFile.getMendixObject());
		});
		return result;		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "List";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
